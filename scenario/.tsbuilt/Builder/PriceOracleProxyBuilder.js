"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildPriceOracleProxy = void 0;
const Command_1 = require("../Command");
const Networks_1 = require("../Networks");
const Contract_1 = require("../Contract");
const CoreValue_1 = require("../CoreValue");
const PriceOracleProxyContract = Contract_1.getContract("PriceOracleProxy");
async function buildPriceOracleProxy(world, from, event) {
    const fetchers = [
        new Command_1.Fetcher(`
        #### Price Oracle Proxy

        * "Deploy <Guardian:Address> <PriceOracle:Address> <cETH:Address> <cYCRV:Address> <cYYCRV:Address> <cYETH:Address> <cXSUSHI:Address>" - The Price Oracle which proxies to a backing oracle
        * E.g. "PriceOracleProxy Deploy Admin (PriceOracle Address) cETH cYCRV cYYCRV cYETH cXSUSHI"
      `, "PriceOracleProxy", [
            new Command_1.Arg("guardian", CoreValue_1.getAddressV),
            new Command_1.Arg("priceOracle", CoreValue_1.getAddressV),
            new Command_1.Arg("cETH", CoreValue_1.getAddressV),
            new Command_1.Arg("cYCRV", CoreValue_1.getAddressV),
            new Command_1.Arg("cYYCRV", CoreValue_1.getAddressV),
            new Command_1.Arg("cYETH", CoreValue_1.getAddressV),
            new Command_1.Arg("cXSUSHI", CoreValue_1.getAddressV)
        ], async (world, { guardian, priceOracle, cETH, cYCRV, cYYCRV, cYETH, cXSUSHI }) => {
            return {
                invokation: await PriceOracleProxyContract.deploy(world, from, [guardian.val, priceOracle.val, cETH.val, cYCRV.val, cYYCRV.val, cYETH.val, cXSUSHI.val]),
                description: "Price Oracle Proxy",
                cETH: cETH.val,
                cYCRV: cYCRV.val,
                cYYCRV: cYYCRV.val,
                cYETH: cYETH.val,
                cXSUSHI: cXSUSHI.val,
            };
        }, { catchall: true })
    ];
    let priceOracleProxyData = await Command_1.getFetcherValue("DeployPriceOracleProxy", fetchers, world, event);
    let invokation = priceOracleProxyData.invokation;
    delete priceOracleProxyData.invokation;
    if (invokation.error) {
        throw invokation.error;
    }
    const priceOracleProxy = invokation.value;
    priceOracleProxyData.address = priceOracleProxy._address;
    world = await Networks_1.storeAndSaveContract(world, priceOracleProxy, 'PriceOracleProxy', invokation, [
        { index: ['PriceOracleProxy'], data: priceOracleProxyData }
    ]);
    return { world, priceOracleProxy, invokation };
}
exports.buildPriceOracleProxy = buildPriceOracleProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpY2VPcmFjbGVQcm94eUJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQnVpbGRlci9QcmljZU9yYWNsZVByb3h5QnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSx3Q0FBeUQ7QUFDekQsMENBQWlEO0FBQ2pELDBDQUF3QztBQUN4Qyw0Q0FBeUM7QUFHekMsTUFBTSx3QkFBd0IsR0FBRyxzQkFBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFjMUQsS0FBSyxVQUFVLHFCQUFxQixDQUFDLEtBQVksRUFBRSxJQUFZLEVBQUUsS0FBWTtJQUNsRixNQUFNLFFBQVEsR0FBRztRQUNmLElBQUksaUJBQU8sQ0FBMko7Ozs7O09BS25LLEVBQ0Qsa0JBQWtCLEVBQ2xCO1lBQ0UsSUFBSSxhQUFHLENBQUMsVUFBVSxFQUFFLHVCQUFXLENBQUM7WUFDaEMsSUFBSSxhQUFHLENBQUMsYUFBYSxFQUFFLHVCQUFXLENBQUM7WUFDbkMsSUFBSSxhQUFHLENBQUMsTUFBTSxFQUFFLHVCQUFXLENBQUM7WUFDNUIsSUFBSSxhQUFHLENBQUMsT0FBTyxFQUFFLHVCQUFXLENBQUM7WUFDN0IsSUFBSSxhQUFHLENBQUMsUUFBUSxFQUFFLHVCQUFXLENBQUM7WUFDOUIsSUFBSSxhQUFHLENBQUMsT0FBTyxFQUFFLHVCQUFXLENBQUM7WUFDN0IsSUFBSSxhQUFHLENBQUMsU0FBUyxFQUFFLHVCQUFXLENBQUM7U0FDaEMsRUFDRCxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFDLEVBQUUsRUFBRTtZQUM1RSxPQUFPO2dCQUNMLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDLE1BQU0sQ0FBbUIsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDMUssV0FBVyxFQUFFLG9CQUFvQjtnQkFDakMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNkLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRztnQkFDaEIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHO2dCQUNsQixLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUc7Z0JBQ2hCLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRzthQUNyQixDQUFDO1FBQ0osQ0FBQyxFQUNELEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUNqQjtLQUNGLENBQUM7SUFFRixJQUFJLG9CQUFvQixHQUFHLE1BQU0seUJBQWUsQ0FBNEIsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5SCxJQUFJLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxVQUFXLENBQUM7SUFDbEQsT0FBTyxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7SUFFdkMsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFO1FBQ3BCLE1BQU0sVUFBVSxDQUFDLEtBQUssQ0FBQztLQUN4QjtJQUNELE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLEtBQU0sQ0FBQztJQUMzQyxvQkFBb0IsQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0lBRXpELEtBQUssR0FBRyxNQUFNLCtCQUFvQixDQUNoQyxLQUFLLEVBQ0wsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQixVQUFVLEVBQ1Y7UUFDRSxFQUFFLEtBQUssRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFO0tBQzVELENBQ0YsQ0FBQztJQUVGLE9BQU8sRUFBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFDLENBQUM7QUFDL0MsQ0FBQztBQXRERCxzREFzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50fSBmcm9tICcuLi9FdmVudCc7XG5pbXBvcnQge2FkZEFjdGlvbiwgV29ybGR9IGZyb20gJy4uL1dvcmxkJztcbmltcG9ydCB7UHJpY2VPcmFjbGVQcm94eX0gZnJvbSAnLi4vQ29udHJhY3QvUHJpY2VPcmFjbGVQcm94eSc7XG5pbXBvcnQge0ludm9rYXRpb259IGZyb20gJy4uL0ludm9rYXRpb24nO1xuaW1wb3J0IHtBcmcsIEZldGNoZXIsIGdldEZldGNoZXJWYWx1ZX0gZnJvbSAnLi4vQ29tbWFuZCc7XG5pbXBvcnQge3N0b3JlQW5kU2F2ZUNvbnRyYWN0fSBmcm9tICcuLi9OZXR3b3Jrcyc7XG5pbXBvcnQge2dldENvbnRyYWN0fSBmcm9tICcuLi9Db250cmFjdCc7XG5pbXBvcnQge2dldEFkZHJlc3NWfSBmcm9tICcuLi9Db3JlVmFsdWUnO1xuaW1wb3J0IHtBZGRyZXNzVn0gZnJvbSAnLi4vVmFsdWUnO1xuXG5jb25zdCBQcmljZU9yYWNsZVByb3h5Q29udHJhY3QgPSBnZXRDb250cmFjdChcIlByaWNlT3JhY2xlUHJveHlcIik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpY2VPcmFjbGVQcm94eURhdGEge1xuICBpbnZva2F0aW9uPzogSW52b2thdGlvbjxQcmljZU9yYWNsZVByb3h5PixcbiAgY29udHJhY3Q/OiBQcmljZU9yYWNsZVByb3h5LFxuICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICBhZGRyZXNzPzogc3RyaW5nLFxuICBjRVRIOiBzdHJpbmcsXG4gIGNZQ1JWOiBzdHJpbmcsXG4gIGNZWUNSVjogc3RyaW5nLFxuICBjWUVUSDogc3RyaW5nLFxuICBjWFNVU0hJOiBzdHJpbmdcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkUHJpY2VPcmFjbGVQcm94eSh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgZXZlbnQ6IEV2ZW50KTogUHJvbWlzZTx7d29ybGQ6IFdvcmxkLCBwcmljZU9yYWNsZVByb3h5OiBQcmljZU9yYWNsZVByb3h5LCBpbnZva2F0aW9uOiBJbnZva2F0aW9uPFByaWNlT3JhY2xlUHJveHk+fT4ge1xuICBjb25zdCBmZXRjaGVycyA9IFtcbiAgICBuZXcgRmV0Y2hlcjx7Z3VhcmRpYW46IEFkZHJlc3NWLCBwcmljZU9yYWNsZTogQWRkcmVzc1YsIGNFVEg6IEFkZHJlc3NWLCBjWUNSVjogQWRkcmVzc1YsIGNZWUNSVjogQWRkcmVzc1YsIGNZRVRIOiBBZGRyZXNzViwgY1hTVVNISTogQWRkcmVzc1Z9LCBQcmljZU9yYWNsZVByb3h5RGF0YT4oYFxuICAgICAgICAjIyMjIFByaWNlIE9yYWNsZSBQcm94eVxuXG4gICAgICAgICogXCJEZXBsb3kgPEd1YXJkaWFuOkFkZHJlc3M+IDxQcmljZU9yYWNsZTpBZGRyZXNzPiA8Y0VUSDpBZGRyZXNzPiA8Y1lDUlY6QWRkcmVzcz4gPGNZWUNSVjpBZGRyZXNzPiA8Y1lFVEg6QWRkcmVzcz4gPGNYU1VTSEk6QWRkcmVzcz5cIiAtIFRoZSBQcmljZSBPcmFjbGUgd2hpY2ggcHJveGllcyB0byBhIGJhY2tpbmcgb3JhY2xlXG4gICAgICAgICogRS5nLiBcIlByaWNlT3JhY2xlUHJveHkgRGVwbG95IEFkbWluIChQcmljZU9yYWNsZSBBZGRyZXNzKSBjRVRIIGNZQ1JWIGNZWUNSViBjWUVUSCBjWFNVU0hJXCJcbiAgICAgIGAsXG4gICAgICBcIlByaWNlT3JhY2xlUHJveHlcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImd1YXJkaWFuXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZyhcInByaWNlT3JhY2xlXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZyhcImNFVEhcIiwgZ2V0QWRkcmVzc1YpLFxuICAgICAgICBuZXcgQXJnKFwiY1lDUlZcIiwgZ2V0QWRkcmVzc1YpLFxuICAgICAgICBuZXcgQXJnKFwiY1lZQ1JWXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZyhcImNZRVRIXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZyhcImNYU1VTSElcIiwgZ2V0QWRkcmVzc1YpXG4gICAgICBdLFxuICAgICAgYXN5bmMgKHdvcmxkLCB7Z3VhcmRpYW4sIHByaWNlT3JhY2xlLCBjRVRILCBjWUNSViwgY1lZQ1JWLCBjWUVUSCwgY1hTVVNISX0pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbnZva2F0aW9uOiBhd2FpdCBQcmljZU9yYWNsZVByb3h5Q29udHJhY3QuZGVwbG95PFByaWNlT3JhY2xlUHJveHk+KHdvcmxkLCBmcm9tLCBbZ3VhcmRpYW4udmFsLCBwcmljZU9yYWNsZS52YWwsIGNFVEgudmFsLCBjWUNSVi52YWwsIGNZWUNSVi52YWwsIGNZRVRILnZhbCwgY1hTVVNISS52YWxdKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQcmljZSBPcmFjbGUgUHJveHlcIixcbiAgICAgICAgICBjRVRIOiBjRVRILnZhbCxcbiAgICAgICAgICBjWUNSVjogY1lDUlYudmFsLFxuICAgICAgICAgIGNZWUNSVjogY1lZQ1JWLnZhbCxcbiAgICAgICAgICBjWUVUSDogY1lFVEgudmFsLFxuICAgICAgICAgIGNYU1VTSEk6IGNYU1VTSEkudmFsLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHtjYXRjaGFsbDogdHJ1ZX1cbiAgICApXG4gIF07XG5cbiAgbGV0IHByaWNlT3JhY2xlUHJveHlEYXRhID0gYXdhaXQgZ2V0RmV0Y2hlclZhbHVlPGFueSwgUHJpY2VPcmFjbGVQcm94eURhdGE+KFwiRGVwbG95UHJpY2VPcmFjbGVQcm94eVwiLCBmZXRjaGVycywgd29ybGQsIGV2ZW50KTtcbiAgbGV0IGludm9rYXRpb24gPSBwcmljZU9yYWNsZVByb3h5RGF0YS5pbnZva2F0aW9uITtcbiAgZGVsZXRlIHByaWNlT3JhY2xlUHJveHlEYXRhLmludm9rYXRpb247XG5cbiAgaWYgKGludm9rYXRpb24uZXJyb3IpIHtcbiAgICB0aHJvdyBpbnZva2F0aW9uLmVycm9yO1xuICB9XG4gIGNvbnN0IHByaWNlT3JhY2xlUHJveHkgPSBpbnZva2F0aW9uLnZhbHVlITtcbiAgcHJpY2VPcmFjbGVQcm94eURhdGEuYWRkcmVzcyA9IHByaWNlT3JhY2xlUHJveHkuX2FkZHJlc3M7XG5cbiAgd29ybGQgPSBhd2FpdCBzdG9yZUFuZFNhdmVDb250cmFjdChcbiAgICB3b3JsZCxcbiAgICBwcmljZU9yYWNsZVByb3h5LFxuICAgICdQcmljZU9yYWNsZVByb3h5JyxcbiAgICBpbnZva2F0aW9uLFxuICAgIFtcbiAgICAgIHsgaW5kZXg6IFsnUHJpY2VPcmFjbGVQcm94eSddLCBkYXRhOiBwcmljZU9yYWNsZVByb3h5RGF0YSB9XG4gICAgXVxuICApO1xuXG4gIHJldHVybiB7d29ybGQsIHByaWNlT3JhY2xlUHJveHksIGludm9rYXRpb259O1xufVxuIl19