"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractByName = exports.getAddress = exports.getComptrollerImplData = exports.getCTokenDelegateData = exports.getCTokenData = exports.getErc20Data = exports.getInterestRateModelData = exports.getInterestRateModel = exports.getCompData = exports.getComp = exports.getPriceOracle = exports.getPriceOracleProxy = exports.getErc20Address = exports.getCTokenDelegateAddress = exports.getCTokenAddress = exports.getComptrollerImpl = exports.getComptroller = exports.getUnitroller = exports.getWorldContractByAddress = exports.getWorldContract = void 0;
const Utils_1 = require("./Utils");
function getContractData(world, indices) {
    return indices.reduce((value, index) => {
        if (value) {
            return value;
        }
        else {
            return index.reduce((data, el) => {
                let lowerEl = el.toLowerCase();
                if (!data) {
                    return;
                }
                else if (typeof data === 'string') {
                    return data;
                }
                else {
                    return data.find((_v, key) => key.toLowerCase().trim() === lowerEl.trim());
                }
            }, world.contractData);
        }
    }, undefined);
}
function getContractDataString(world, indices) {
    const value = getContractData(world, indices);
    if (!value || typeof value !== 'string') {
        throw new Error(`Failed to find string value by index (got ${value}): ${JSON.stringify(indices)}, index contains: ${JSON.stringify(world.contractData.toJSON())}`);
    }
    return value;
}
function getWorldContract(world, indices) {
    const address = getContractDataString(world, indices);
    return getWorldContractByAddress(world, address);
}
exports.getWorldContract = getWorldContract;
function getWorldContractByAddress(world, address) {
    const contract = world.contractIndex[address.toLowerCase()];
    if (!contract) {
        throw new Error(`Failed to find world contract by address: ${address}, index contains: ${JSON.stringify(Object.keys(world.contractIndex))}`);
    }
    return contract;
}
exports.getWorldContractByAddress = getWorldContractByAddress;
async function getUnitroller(world) {
    return getWorldContract(world, [['Contracts', 'Unitroller']]);
}
exports.getUnitroller = getUnitroller;
async function getComptroller(world) {
    return getWorldContract(world, [['Contracts', 'Comptroller']]);
}
exports.getComptroller = getComptroller;
async function getComptrollerImpl(world, comptrollerImplArg) {
    return getWorldContract(world, [['Comptroller', Utils_1.mustString(comptrollerImplArg), 'address']]);
}
exports.getComptrollerImpl = getComptrollerImpl;
function getCTokenAddress(world, cTokenArg) {
    return getContractDataString(world, [['cTokens', cTokenArg, 'address']]);
}
exports.getCTokenAddress = getCTokenAddress;
function getCTokenDelegateAddress(world, cTokenDelegateArg) {
    return getContractDataString(world, [['CTokenDelegate', cTokenDelegateArg, 'address']]);
}
exports.getCTokenDelegateAddress = getCTokenDelegateAddress;
function getErc20Address(world, erc20Arg) {
    return getContractDataString(world, [['Tokens', erc20Arg, 'address']]);
}
exports.getErc20Address = getErc20Address;
async function getPriceOracleProxy(world) {
    return getWorldContract(world, [['Contracts', 'PriceOracleProxy']]);
}
exports.getPriceOracleProxy = getPriceOracleProxy;
async function getPriceOracle(world) {
    return getWorldContract(world, [['Contracts', 'PriceOracle']]);
}
exports.getPriceOracle = getPriceOracle;
async function getComp(world, compArg) {
    return getWorldContract(world, [['Comp', 'address']]);
}
exports.getComp = getComp;
async function getCompData(world, compArg) {
    let contract = await getComp(world, compArg);
    let data = getContractData(world, [['Comp', compArg]]);
    return [contract, compArg, data];
}
exports.getCompData = getCompData;
async function getInterestRateModel(world, interestRateModelArg) {
    return getWorldContract(world, [['InterestRateModel', Utils_1.mustString(interestRateModelArg), 'address']]);
}
exports.getInterestRateModel = getInterestRateModel;
async function getInterestRateModelData(world, interestRateModelArg) {
    let contract = await getInterestRateModel(world, interestRateModelArg);
    let data = getContractData(world, [['InterestRateModel', interestRateModelArg]]);
    return [contract, interestRateModelArg, data];
}
exports.getInterestRateModelData = getInterestRateModelData;
async function getErc20Data(world, erc20Arg) {
    let contract = getWorldContract(world, [['Tokens', erc20Arg, 'address']]);
    let data = getContractData(world, [['Tokens', erc20Arg]]);
    return [contract, erc20Arg, data];
}
exports.getErc20Data = getErc20Data;
async function getCTokenData(world, cTokenArg) {
    let contract = getWorldContract(world, [['cTokens', cTokenArg, 'address']]);
    let data = getContractData(world, [['CTokens', cTokenArg]]);
    return [contract, cTokenArg, data];
}
exports.getCTokenData = getCTokenData;
async function getCTokenDelegateData(world, cTokenDelegateArg) {
    let contract = getWorldContract(world, [['CTokenDelegate', cTokenDelegateArg, 'address']]);
    let data = getContractData(world, [['CTokenDelegate', cTokenDelegateArg]]);
    return [contract, cTokenDelegateArg, data];
}
exports.getCTokenDelegateData = getCTokenDelegateData;
async function getComptrollerImplData(world, comptrollerImplArg) {
    let contract = await getComptrollerImpl(world, comptrollerImplArg);
    let data = getContractData(world, [['Comptroller', comptrollerImplArg]]);
    return [contract, comptrollerImplArg, data];
}
exports.getComptrollerImplData = getComptrollerImplData;
function getAddress(world, addressArg) {
    if (addressArg.toLowerCase() === 'zero') {
        return '0x0000000000000000000000000000000000000000';
    }
    if (addressArg.startsWith('0x')) {
        return addressArg;
    }
    let alias = Object.entries(world.settings.aliases).find(([alias, addr]) => alias.toLowerCase() === addressArg.toLowerCase());
    if (alias) {
        return alias[1];
    }
    let account = world.accounts.find(account => account.name.toLowerCase() === addressArg.toLowerCase());
    if (account) {
        return account.address;
    }
    return getContractDataString(world, [
        ['Contracts', addressArg],
        ['cTokens', addressArg, 'address'],
        ['CTokenDelegate', addressArg, 'address'],
        ['Tokens', addressArg, 'address'],
        ['Comptroller', addressArg, 'address']
    ]);
}
exports.getAddress = getAddress;
function getContractByName(world, name) {
    return getWorldContract(world, [['Contracts', name]]);
}
exports.getContractByName = getContractByName;
//# sourceMappingURL=data:application/json;base64,