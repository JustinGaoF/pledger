"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processComptrollerEvent = exports.comptrollerCommands = void 0;
const World_1 = require("../World");
const Contract_1 = require("../Contract");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const ComptrollerImplBuilder_1 = require("../Builder/ComptrollerImplBuilder");
const ErrorReporter_1 = require("../ErrorReporter");
const ContractLookup_1 = require("../ContractLookup");
const ComptrollerValue_1 = require("../Value/ComptrollerValue");
const CTokenValue_1 = require("../Value/CTokenValue");
const Utils_1 = require("../Utils");
async function genComptroller(world, from, params) {
    let { world: nextWorld, comptrollerImpl: comptroller, comptrollerImplData: comptrollerData } = await ComptrollerImplBuilder_1.buildComptrollerImpl(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Added Comptroller (${comptrollerData.description}) at address ${comptroller._address}`, comptrollerData.invokation);
    return world;
}
;
async function setPaused(world, from, comptroller, actionName, isPaused) {
    const pauseMap = {
        "Mint": comptroller.methods._setMintPaused
    };
    if (!pauseMap[actionName]) {
        throw `Cannot find pause function for action "${actionName}"`;
    }
    let invokation = await Invokation_1.invoke(world, comptroller[actionName]([isPaused]), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: set paused for ${actionName} to ${isPaused}`, invokation);
    return world;
}
async function setMaxAssets(world, from, comptroller, numberOfAssets) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setMaxAssets(numberOfAssets.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set max assets to ${numberOfAssets.show()}`, invokation);
    return world;
}
async function setLiquidationIncentive(world, from, comptroller, liquidationIncentive) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setLiquidationIncentive(liquidationIncentive.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set liquidation incentive to ${liquidationIncentive.show()}`, invokation);
    return world;
}
async function supportMarket(world, from, comptroller, cToken) {
    if (world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world.printer.printLine(`Dry run: Supporting market  \`${cToken._address}\``);
        return world;
    }
    let invokation = await Invokation_1.invoke(world, comptroller.methods._supportMarket(cToken._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Supported market ${cToken.name}`, invokation);
    return world;
}
async function unlistMarket(world, from, comptroller, cToken) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.unlist(cToken._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Unlisted market ${cToken.name}`, invokation);
    return world;
}
async function enterMarkets(world, from, comptroller, assets) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.enterMarkets(assets), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Called enter assets ${assets} as ${World_1.describeUser(world, from)}`, invokation);
    return world;
}
async function exitMarket(world, from, comptroller, asset) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.exitMarket(asset), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Called exit market ${asset} as ${World_1.describeUser(world, from)}`, invokation);
    return world;
}
async function setPriceOracle(world, from, comptroller, priceOracleAddr) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setPriceOracle(priceOracleAddr), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set price oracle for to ${priceOracleAddr} as ${World_1.describeUser(world, from)}`, invokation);
    return world;
}
async function setCollateralFactor(world, from, comptroller, cToken, collateralFactor) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setCollateralFactor(cToken._address, collateralFactor.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set collateral factor for ${cToken.name} to ${collateralFactor.show()}`, invokation);
    return world;
}
async function setCloseFactor(world, from, comptroller, closeFactor) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setCloseFactor(closeFactor.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set close factor to ${closeFactor.show()}`, invokation);
    return world;
}
async function fastForward(world, from, comptroller, blocks) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.fastForward(blocks.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Fast forward ${blocks.show()} blocks to #${invokation.value}`, invokation);
    return world;
}
async function sendAny(world, from, comptroller, signature, callArgs) {
    const fnData = Utils_1.encodeABI(world, signature, callArgs);
    await world.web3.eth.sendTransaction({
        to: comptroller._address,
        data: fnData,
        from: from
    });
    return world;
}
async function addCompMarkets(world, from, comptroller, cTokens) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._addCompMarkets(cTokens.map(c => c._address)), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Added COMP markets ${cTokens.map(c => c.name)}`, invokation);
    return world;
}
async function dropCompMarket(world, from, comptroller, cToken) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._dropCompMarket(cToken._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Drop COMP market ${cToken.name}`, invokation);
    return world;
}
async function refreshCompSpeeds(world, from, comptroller) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.refreshCompSpeeds(), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Refreshed COMP speeds`, invokation);
    return world;
}
async function claimComp(world, from, comptroller, holder) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.claimComp(holder), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comp claimed by ${holder}`, invokation);
    return world;
}
async function setCompRate(world, from, comptroller, rate) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setCompRate(rate.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comp rate set to ${rate.show()}`, invokation);
    return world;
}
async function setCompSpeeds(world, from, comptroller, cTokens, speeds) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setCompSpeeds(cTokens.map(c => c._address), speeds.map(s => s.encode())), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set COMP markets ${cTokens.map(c => c.name)} speeds to ${speeds}`, invokation);
    return world;
}
async function printLiquidity(world, comptroller) {
    let enterEvents = await Contract_1.getPastEvents(world, comptroller, 'StdComptroller', 'MarketEntered');
    let addresses = enterEvents.map((event) => event.returnValues['account']);
    let uniq = [...new Set(addresses)];
    world.printer.printLine("Liquidity:");
    const liquidityMap = await Promise.all(uniq.map(async (address) => {
        let userLiquidity = await ComptrollerValue_1.getLiquidity(world, comptroller, address);
        return [address, userLiquidity.val];
    }));
    liquidityMap.forEach(([address, liquidity]) => {
        world.printer.printLine(`\t${world.settings.lookupAlias(address)}: ${liquidity / 1e18}e18`);
    });
    return world;
}
async function setPendingAdmin(world, from, comptroller, newPendingAdmin) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setPendingAdmin(newPendingAdmin), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} sets pending admin to ${newPendingAdmin}`, invokation);
    return world;
}
async function acceptAdmin(world, from, comptroller) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._acceptAdmin(), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} accepts admin`, invokation);
    return world;
}
async function setPauseGuardian(world, from, comptroller, newPauseGuardian) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setPauseGuardian(newPauseGuardian), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} sets pause guardian to ${newPauseGuardian}`, invokation);
    return world;
}
async function setGuardianPaused(world, from, comptroller, action, state) {
    let fun;
    switch (action) {
        case "Transfer":
            fun = comptroller.methods._setTransferPaused;
            break;
        case "Seize":
            fun = comptroller.methods._setSeizePaused;
            break;
    }
    let invokation = await Invokation_1.invoke(world, fun(state), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} sets ${action} paused`, invokation);
    return world;
}
async function setGuardianMarketPaused(world, from, comptroller, cToken, action, state) {
    let fun;
    switch (action) {
        case "Mint":
            fun = comptroller.methods._setMintPaused;
            break;
        case "Borrow":
            fun = comptroller.methods._setBorrowPaused;
            break;
    }
    let invokation = await Invokation_1.invoke(world, fun(cToken._address, state), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} sets ${action} paused`, invokation);
    return world;
}
async function setMarketSupplyCaps(world, from, comptroller, cTokens, supplyCaps) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setMarketSupplyCaps(cTokens.map(c => c._address), supplyCaps.map(c => c.encode())), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Supply caps on ${cTokens} set to ${supplyCaps}`, invokation);
    return world;
}
async function setSupplyCapGuardian(world, from, comptroller, newSupplyCapGuardian) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setSupplyCapGuardian(newSupplyCapGuardian), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} sets supply cap guardian to ${newSupplyCapGuardian}`, invokation);
    return world;
}
async function setMarketBorrowCaps(world, from, comptroller, cTokens, borrowCaps) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setMarketBorrowCaps(cTokens.map(c => c._address), borrowCaps.map(c => c.encode())), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Borrow caps on ${cTokens} set to ${borrowCaps}`, invokation);
    return world;
}
async function setBorrowCapGuardian(world, from, comptroller, newBorrowCapGuardian) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods._setBorrowCapGuardian(newBorrowCapGuardian), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Comptroller: ${World_1.describeUser(world, from)} sets borrow cap guardian to ${newBorrowCapGuardian}`, invokation);
    return world;
}
async function setBlockNumber(world, from, comptroller, blockNumber) {
    let invokation = await Invokation_1.invoke(world, comptroller.methods.setBlockNumber(blockNumber.encode()), from, ErrorReporter_1.ComptrollerErrorReporter);
    return World_1.addAction(world, `Set Governor blockNumber to ${blockNumber.show()}`, invokation);
    return world;
}
function comptrollerCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Comptroller Deploy ...comptrollerParams" - Generates a new Comptroller (not as Impl)
          * E.g. "Comptroller Deploy YesNo"
      `, "Deploy", [new Command_1.Arg("comptrollerParams", CoreValue_1.getEventV, { variadic: true })], (world, from, { comptrollerParams }) => genComptroller(world, from, comptrollerParams.val)),
        new Command_1.Command(`
        #### SetPaused

        * "Comptroller SetPaused <Action> <Bool>" - Pauses or unpaused given cToken function
          * E.g. "Comptroller SetPaused "Mint" True"
      `, "SetPaused", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("action", CoreValue_1.getStringV),
            new Command_1.Arg("isPaused", CoreValue_1.getBoolV)
        ], (world, from, { comptroller, action, isPaused }) => setPaused(world, from, comptroller, action.val, isPaused.val)),
        new Command_1.Command(`
        #### SupportMarket

        * "Comptroller SupportMarket <CToken>" - Adds support in the Comptroller for the given cToken
          * E.g. "Comptroller SupportMarket cZRX"
      `, "SupportMarket", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { comptroller, cToken }) => supportMarket(world, from, comptroller, cToken)),
        new Command_1.Command(`
        #### UnList

        * "Comptroller UnList <CToken>" - Mock unlists a given market in tests
          * E.g. "Comptroller UnList cZRX"
      `, "UnList", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { comptroller, cToken }) => unlistMarket(world, from, comptroller, cToken)),
        new Command_1.Command(`
        #### EnterMarkets

        * "Comptroller EnterMarkets (<CToken> ...)" - User enters the given markets
          * E.g. "Comptroller EnterMarkets (cZRX cETH)"
      `, "EnterMarkets", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cTokens", CTokenValue_1.getCTokenV, { mapped: true })
        ], (world, from, { comptroller, cTokens }) => enterMarkets(world, from, comptroller, cTokens.map((c) => c._address))),
        new Command_1.Command(`
        #### ExitMarket

        * "Comptroller ExitMarket <CToken>" - User exits the given markets
          * E.g. "Comptroller ExitMarket cZRX"
      `, "ExitMarket", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { comptroller, cToken }) => exitMarket(world, from, comptroller, cToken._address)),
        new Command_1.Command(`
        #### SetMaxAssets

        * "Comptroller SetMaxAssets <Number>" - Sets (or resets) the max allowed asset count
          * E.g. "Comptroller SetMaxAssets 4"
      `, "SetMaxAssets", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("maxAssets", CoreValue_1.getNumberV)
        ], (world, from, { comptroller, maxAssets }) => setMaxAssets(world, from, comptroller, maxAssets)),
        new Command_1.Command(`
        #### LiquidationIncentive

        * "Comptroller LiquidationIncentive <Number>" - Sets the liquidation incentive
          * E.g. "Comptroller LiquidationIncentive 1.1"
      `, "LiquidationIncentive", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("liquidationIncentive", CoreValue_1.getExpNumberV)
        ], (world, from, { comptroller, liquidationIncentive }) => setLiquidationIncentive(world, from, comptroller, liquidationIncentive)),
        new Command_1.Command(`
        #### SetPriceOracle

        * "Comptroller SetPriceOracle oracle:<Address>" - Sets the price oracle address
          * E.g. "Comptroller SetPriceOracle 0x..."
      `, "SetPriceOracle", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("priceOracle", CoreValue_1.getAddressV)
        ], (world, from, { comptroller, priceOracle }) => setPriceOracle(world, from, comptroller, priceOracle.val)),
        new Command_1.Command(`
        #### SetCollateralFactor

        * "Comptroller SetCollateralFactor <CToken> <Number>" - Sets the collateral factor for given cToken to number
          * E.g. "Comptroller SetCollateralFactor cZRX 0.1"
      `, "SetCollateralFactor", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("collateralFactor", CoreValue_1.getExpNumberV)
        ], (world, from, { comptroller, cToken, collateralFactor }) => setCollateralFactor(world, from, comptroller, cToken, collateralFactor)),
        new Command_1.Command(`
        #### SetCloseFactor

        * "Comptroller SetCloseFactor <Number>" - Sets the close factor to given percentage
          * E.g. "Comptroller SetCloseFactor 0.2"
      `, "SetCloseFactor", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("closeFactor", CoreValue_1.getPercentV)
        ], (world, from, { comptroller, closeFactor }) => setCloseFactor(world, from, comptroller, closeFactor)),
        new Command_1.Command(`
        #### SetPendingAdmin

        * "Comptroller SetPendingAdmin newPendingAdmin:<Address>" - Sets the pending admin for the Comptroller
          * E.g. "Comptroller SetPendingAdmin Geoff"
      `, "SetPendingAdmin", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("newPendingAdmin", CoreValue_1.getAddressV)
        ], (world, from, { comptroller, newPendingAdmin }) => setPendingAdmin(world, from, comptroller, newPendingAdmin.val)),
        new Command_1.Command(`
        #### AcceptAdmin

        * "Comptroller AcceptAdmin" - Accepts admin for the Comptroller
          * E.g. "From Geoff (Comptroller AcceptAdmin)"
      `, "AcceptAdmin", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
        ], (world, from, { comptroller }) => acceptAdmin(world, from, comptroller)),
        new Command_1.Command(`
        #### SetPauseGuardian

        * "Comptroller SetPauseGuardian newPauseGuardian:<Address>" - Sets the PauseGuardian for the Comptroller
          * E.g. "Comptroller SetPauseGuardian Geoff"
      `, "SetPauseGuardian", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("newPauseGuardian", CoreValue_1.getAddressV)
        ], (world, from, { comptroller, newPauseGuardian }) => setPauseGuardian(world, from, comptroller, newPauseGuardian.val)),
        new Command_1.Command(`
        #### SetGuardianPaused

        * "Comptroller SetGuardianPaused <Action> <Bool>" - Pauses or unpaused given cToken function
        * E.g. "Comptroller SetGuardianPaused "Transfer" True"
        `, "SetGuardianPaused", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("action", CoreValue_1.getStringV),
            new Command_1.Arg("isPaused", CoreValue_1.getBoolV)
        ], (world, from, { comptroller, action, isPaused }) => setGuardianPaused(world, from, comptroller, action.val, isPaused.val)),
        new Command_1.Command(`
        #### SetGuardianMarketPaused

        * "Comptroller SetGuardianMarketPaused <CToken> <Action> <Bool>" - Pauses or unpaused given cToken function
        * E.g. "Comptroller SetGuardianMarketPaused cREP "Mint" True"
        `, "SetGuardianMarketPaused", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("action", CoreValue_1.getStringV),
            new Command_1.Arg("isPaused", CoreValue_1.getBoolV)
        ], (world, from, { comptroller, cToken, action, isPaused }) => setGuardianMarketPaused(world, from, comptroller, cToken, action.val, isPaused.val)),
        new Command_1.Command(`
        #### FastForward

        * "FastForward n:<Number> Blocks" - Moves the block number forward "n" blocks. Note: in "CTokenScenario" and "ComptrollerScenario" the current block number is mocked (starting at 100000). This is the only way for the protocol to see a higher block number (for accruing interest).
          * E.g. "Comptroller FastForward 5 Blocks" - Move block number forward 5 blocks.
      `, "FastForward", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("blocks", CoreValue_1.getNumberV),
            new Command_1.Arg("_keyword", CoreValue_1.getStringV)
        ], (world, from, { comptroller, blocks }) => fastForward(world, from, comptroller, blocks)),
        new Command_1.View(`
        #### Liquidity

        * "Comptroller Liquidity" - Prints liquidity of all minters or borrowers
      `, "Liquidity", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
        ], (world, { comptroller }) => printLiquidity(world, comptroller)),
        new Command_1.View(`
        #### Decode

        * "Decode input:<String>" - Prints information about a call to a Comptroller contract
      `, "Decode", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("input", CoreValue_1.getStringV)
        ], (world, { comptroller, input }) => Contract_1.decodeCall(world, comptroller, input.val)),
        new Command_1.Command(`
      #### Send
      * Comptroller Send functionSignature:<String> callArgs[] - Sends any transaction to comptroller
      * E.g: Comptroller Send "setCompAddress(address)" (Address COMP)
      `, "Send", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("signature", CoreValue_1.getStringV),
            new Command_1.Arg("callArgs", CoreValue_1.getCoreValue, { variadic: true, mapped: true })
        ], (world, from, { comptroller, signature, callArgs }) => sendAny(world, from, comptroller, signature.val, Utils_1.rawValues(callArgs))),
        new Command_1.Command(`
      #### AddCompMarkets

      * "Comptroller AddCompMarkets (<Address> ...)" - Makes a market COMP-enabled
      * E.g. "Comptroller AddCompMarkets (cZRX cBAT)
      `, "AddCompMarkets", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cTokens", CTokenValue_1.getCTokenV, { mapped: true })
        ], (world, from, { comptroller, cTokens }) => addCompMarkets(world, from, comptroller, cTokens)),
        new Command_1.Command(`
      #### DropCompMarket

      * "Comptroller DropCompMarket <Address>" - Makes a market COMP
      * E.g. "Comptroller DropCompMarket cZRX
      `, "DropCompMarket", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { comptroller, cToken }) => dropCompMarket(world, from, comptroller, cToken)),
        new Command_1.Command(`
      #### RefreshCompSpeeds

      * "Comptroller RefreshCompSpeeds" - Recalculates all the COMP market speeds
      * E.g. "Comptroller RefreshCompSpeeds
      `, "RefreshCompSpeeds", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true })
        ], (world, from, { comptroller }) => refreshCompSpeeds(world, from, comptroller)),
        new Command_1.Command(`
      #### ClaimComp

      * "Comptroller ClaimComp <holder>" - Claims comp
      * E.g. "Comptroller ClaimComp Geoff
      `, "ClaimComp", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("holder", CoreValue_1.getAddressV)
        ], (world, from, { comptroller, holder }) => claimComp(world, from, comptroller, holder.val)),
        new Command_1.Command(`
      #### SetCompRate

      * "Comptroller SetCompRate <rate>" - Sets COMP rate
      * E.g. "Comptroller SetCompRate 1e18
      `, "SetCompRate", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("rate", CoreValue_1.getNumberV)
        ], (world, from, { comptroller, rate }) => setCompRate(world, from, comptroller, rate)),
        new Command_1.Command(`
      #### SetCompSpeeds

      * "Comptroller SetCompSpeeds (<CToken> ...) (<speed> ...)" - Set the COMP market speeds
      * E.g. "Comptroller SetCompSpeeds (cZRX cBAT) (1e18, 1e18)
      `, "SetCompSpeeds", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cTokens", CTokenValue_1.getCTokenV, { mapped: true }),
            new Command_1.Arg("speeds", CoreValue_1.getNumberV, { mapped: true })
        ], (world, from, { comptroller, cTokens, speeds }) => setCompSpeeds(world, from, comptroller, cTokens, speeds)),
        new Command_1.Command(`
      #### SetMarketSupplyCaps

      * "Comptroller SetMarketSupplyCaps (<CToken> ...) (<supplyCap> ...)" - Sets Market Supply Caps
      * E.g. "Comptroller SetMarketSupplyCaps (cZRX cUSDC) (10000.0e18, 1000.0e6)
      `, "SetMarketSupplyCaps", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cTokens", CTokenValue_1.getCTokenV, { mapped: true }),
            new Command_1.Arg("supplyCaps", CoreValue_1.getNumberV, { mapped: true })
        ], (world, from, { comptroller, cTokens, supplyCaps }) => setMarketSupplyCaps(world, from, comptroller, cTokens, supplyCaps)),
        new Command_1.Command(`
      #### SetSupplyCapGuardian

        * "Comptroller SetSupplyCapGuardian newSupplyCapGuardian:<Address>" - Sets the Supply Cap Guardian for the Comptroller
          * E.g. "Comptroller SetSupplyCapGuardian Geoff"
      `, "SetSupplyCapGuardian", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("newSupplyCapGuardian", CoreValue_1.getAddressV)
        ], (world, from, { comptroller, newSupplyCapGuardian }) => setSupplyCapGuardian(world, from, comptroller, newSupplyCapGuardian.val)),
        new Command_1.Command(`
      #### SetMarketBorrowCaps

      * "Comptroller SetMarketBorrowCaps (<CToken> ...) (<borrowCap> ...)" - Sets Market Borrow Caps
      * E.g "Comptroller SetMarketBorrowCaps (cZRX cUSDC) (10000.0e18, 1000.0e6)
      `, "SetMarketBorrowCaps", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("cTokens", CTokenValue_1.getCTokenV, { mapped: true }),
            new Command_1.Arg("borrowCaps", CoreValue_1.getNumberV, { mapped: true })
        ], (world, from, { comptroller, cTokens, borrowCaps }) => setMarketBorrowCaps(world, from, comptroller, cTokens, borrowCaps)),
        new Command_1.Command(`
        #### SetBorrowCapGuardian

        * "Comptroller SetBorrowCapGuardian newBorrowCapGuardian:<Address>" - Sets the Borrow Cap Guardian for the Comptroller
          * E.g. "Comptroller SetBorrowCapGuardian Geoff"
      `, "SetBorrowCapGuardian", [
            new Command_1.Arg("comptroller", ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg("newBorrowCapGuardian", CoreValue_1.getAddressV)
        ], (world, from, { comptroller, newBorrowCapGuardian }) => setBorrowCapGuardian(world, from, comptroller, newBorrowCapGuardian.val)),
        new Command_1.Command(`
        #### SetBlockNumber

        * "Comptroller SetBlockNumber <BlockNumber>" - Sets the blockNumber of the Comptroller
        * E.g. "Comptroller SetBlockNumber 500"
      `, 'SetBlockNumber', [
            new Command_1.Arg('comptroller', ContractLookup_1.getComptroller, { implicit: true }),
            new Command_1.Arg('blockNumber', CoreValue_1.getNumberV)
        ], (world, from, { comptroller, blockNumber }) => setBlockNumber(world, from, comptroller, blockNumber)),
    ];
}
exports.comptrollerCommands = comptrollerCommands;
async function processComptrollerEvent(world, event, from) {
    return await Command_1.processCommandEvent("Comptroller", comptrollerCommands(), world, event, from);
}
exports.processComptrollerEvent = processComptrollerEvent;
//# sourceMappingURL=data:application/json;base64,