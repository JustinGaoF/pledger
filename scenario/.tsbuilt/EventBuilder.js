"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildContractFetcher = exports.buildContractEvent = void 0;
const World_1 = require("./World");
const Command_1 = require("./Command");
const Networks_1 = require("./Networks");
const Contract_1 = require("./Contract");
const ContractLookup_1 = require("./ContractLookup");
const Utils_1 = require("./Utils");
const Invokation_1 = require("./Invokation");
const Value_1 = require("./Value");
const CoreValue_1 = require("./CoreValue");
const typeMappings = () => ({
    address: {
        builder: (x) => new Value_1.AddressV(x),
        getter: CoreValue_1.getAddressV
    },
    'address[]': {
        builder: (x) => new Value_1.ArrayV(x),
        getter: (x) => CoreValue_1.getArrayV(x),
    },
    string: {
        builder: (x) => new Value_1.StringV(x),
        getter: CoreValue_1.getStringV
    },
    uint256: {
        builder: (x) => new Value_1.NumberV(x),
        getter: CoreValue_1.getNumberV
    },
    'uint256[]': {
        builder: (x) => new Value_1.ArrayV(x),
        getter: (x) => CoreValue_1.getArrayV(x),
    },
    'uint32[]': {
        builder: (x) => new Value_1.ArrayV(x),
        getter: (x) => CoreValue_1.getArrayV(x),
    },
    'uint96[]': {
        builder: (x) => new Value_1.ArrayV(x),
        getter: (x) => CoreValue_1.getArrayV(x),
    }
});
function buildArg(contractName, name, input) {
    let { getter } = typeMappings()[input.type] || {};
    if (!getter) {
        throw new Error(`Unknown ABI Input Type: ${input.type} of \`${name}\` in ${contractName}`);
    }
    return new Command_1.Arg(name, getter);
}
function getEventName(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
function getContractObjectFn(contractName, implicit) {
    if (implicit) {
        return async function getContractObject(world) {
            return ContractLookup_1.getWorldContract(world, [['Contracts', contractName]]);
        };
    }
    else {
        return async function getContractObject(world, event) {
            return ContractLookup_1.getWorldContract(world, [['Contracts', Utils_1.mustString(event)]]);
        };
    }
}
function buildContractEvent(contractName, implicit) {
    return async (world) => {
        let contractDeployer = Contract_1.getContract(contractName);
        let abis = await world.saddle.abi(contractName);
        async function build(world, from, params) {
            let constructors = abis.filter(({ type }) => type === 'constructor');
            if (constructors.length === 0) {
                constructors.push({
                    constant: false,
                    inputs: [],
                    outputs: [],
                    payable: true,
                    stateMutability: "payable",
                    type: 'constructor'
                });
            }
            const fetchers = constructors.map((abi) => {
                let nameArg = implicit ? [] : [
                    new Command_1.Arg('name', CoreValue_1.getStringV, { default: new Value_1.StringV(contractName) })
                ];
                let nameArgDesc = implicit ? `` : `name:<String>=${contractName}" `;
                let inputNames = abi.inputs.map((input) => getEventName(input.name));
                let args = abi.inputs.map((input) => buildArg(contractName, input.name, input));
                return new Command_1.Fetcher(`
            #### ${contractName}

            * "${contractName} ${nameArgDesc}${inputNames.join(" ")} - Build ${contractName}
              * E.g. "${contractName} Deploy"
            }
          `, contractName, nameArg.concat(args), async (world, paramValues) => {
                    let name = implicit ? contractName : paramValues['name'].val;
                    let params = args.map((arg) => paramValues[arg.name]); // TODO: This is just a guess
                    let paramsEncoded = params.map((param) => typeof (param['encode']) === 'function' ? param.encode() : param.val);
                    return {
                        invokation: await contractDeployer.deploy(world, from, paramsEncoded),
                        name: name,
                        contract: contractName
                    };
                }, { catchall: true });
            });
            let data = await Command_1.getFetcherValue(`Deploy${contractName}`, fetchers, world, params);
            let invokation = data.invokation;
            delete data.invokation;
            if (invokation.error) {
                throw invokation.error;
            }
            const contract = invokation.value;
            contract.address = contract._address;
            const index = contractName == data.name ? [contractName] : [contractName, data.name];
            world = await Networks_1.storeAndSaveContract(world, contract, data.name, invokation, [
                { index: index, data: data }
            ]);
            return { world, contract, data };
        }
        async function deploy(world, from, params) {
            let { world: nextWorld, contract, data } = await build(world, from, params);
            world = nextWorld;
            world = World_1.addAction(world, `Deployed ${contractName} ${data.contract} to address ${contract._address}`, data.invokation);
            return world;
        }
        function commands() {
            async function buildOutput(world, from, fn, inputs, output) {
                const sendable = (inputs['contract'].methods[fn](...Object.values(inputs).slice(1)));
                let invokation = await Invokation_1.invoke(world, sendable, from);
                world = World_1.addAction(world, `Invokation of ${fn} with inputs ${inputs}`, invokation);
                return world;
            }
            let abiCommands = abis.filter(({ type }) => type === 'function').map((abi) => {
                let eventName = getEventName(abi.name);
                let inputNames = abi.inputs.map((input) => getEventName(input.name));
                let args = [
                    new Command_1.Arg("contract", getContractObjectFn(contractName, implicit), implicit ? { implicit: true } : {})
                ].concat(abi.inputs.map((input) => buildArg(contractName, abi.name, input)));
                return new Command_1.Command(`
            #### ${eventName}

            * "${eventName} ${inputNames.join(" ")}" - Executes \`${abi.name}\` function
          `, eventName, args, (world, from, inputs) => buildOutput(world, from, abi.name, inputs, abi.outputs[0]), { namePos: implicit ? 0 : 1 });
            });
            return [
                ...abiCommands,
                new Command_1.Command(`
            #### ${contractName}

            * "${contractName} Deploy" - Deploy ${contractName}
              * E.g. "Counter Deploy"
          `, "Deploy", [
                    new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
                ], (world, from, { params }) => deploy(world, from, params.val))
            ];
        }
        async function processEvent(world, event, from) {
            return await Command_1.processCommandEvent(contractName, commands(), world, event, from);
        }
        let command = new Command_1.Command(`
        #### ${contractName}

        * "${contractName} ...event" - Runs given ${contractName} event
        * E.g. "${contractName} Deploy"
      `, contractName, [new Command_1.Arg('event', CoreValue_1.getEventV, { variadic: true })], (world, from, { event }) => {
            return processEvent(world, event.val, from);
        }, { subExpressions: commands() });
        return command;
    };
}
exports.buildContractEvent = buildContractEvent;
async function buildContractFetcher(world, contractName, implicit) {
    let abis = await world.saddle.abi(contractName);
    function fetchers() {
        async function buildOutput(world, fn, inputs, output) {
            const callable = (inputs['contract'].methods[fn](...Object.values(inputs).slice(1)));
            let value = await callable.call();
            let { builder } = typeMappings()[output.type] || {};
            if (!builder) {
                throw new Error(`Unknown ABI Output Type: ${output.type} of \`${fn}\` in ${contractName}`);
            }
            return builder(value);
        }
        return abis.filter(({ name }) => !!name).map((abi) => {
            let eventName = getEventName(abi.name);
            let inputNames = abi.inputs.map((input) => getEventName(input.name));
            let args = [
                new Command_1.Arg("contract", getContractObjectFn(contractName, implicit), implicit ? { implicit: true } : {})
            ].concat(abi.inputs.map((input) => buildArg(contractName, abi.name, input)));
            return new Command_1.Fetcher(`
          #### ${eventName}

          * "${eventName} ${inputNames.join(" ")}" - Returns the result of \`${abi.name}\` function
        `, eventName, args, (world, inputs) => buildOutput(world, abi.name, inputs, abi.outputs[0]), { namePos: implicit ? 0 : 1 });
        });
    }
    async function getValue(world, event) {
        return await Command_1.getFetcherValue(contractName, fetchers(), world, event);
    }
    let fetcher = new Command_1.Fetcher(`
      #### ${contractName}

      * "${contractName} ...args" - Returns ${contractName} value
    `, contractName, [new Command_1.Arg('res', getValue, { variadic: true })], async (world, { res }) => res, { subExpressions: fetchers() });
    return fetcher;
}
exports.buildContractFetcher = buildContractFetcher;
//# sourceMappingURL=data:application/json;base64,