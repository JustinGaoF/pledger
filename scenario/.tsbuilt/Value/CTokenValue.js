"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCTokenValue = exports.cTokenFetchers = exports.getCErc20DelegatorV = exports.getCTokenV = void 0;
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Value_1 = require("../Value");
const ContractLookup_1 = require("../ContractLookup");
async function getCTokenV(world, event) {
    const address = await CoreValue_1.mapValue(world, event, (str) => new Value_1.AddressV(ContractLookup_1.getCTokenAddress(world, str)), CoreValue_1.getCoreValue, Value_1.AddressV);
    return ContractLookup_1.getWorldContractByAddress(world, address.val);
}
exports.getCTokenV = getCTokenV;
async function getCErc20DelegatorV(world, event) {
    const address = await CoreValue_1.mapValue(world, event, (str) => new Value_1.AddressV(ContractLookup_1.getCTokenAddress(world, str)), CoreValue_1.getCoreValue, Value_1.AddressV);
    return ContractLookup_1.getWorldContractByAddress(world, address.val);
}
exports.getCErc20DelegatorV = getCErc20DelegatorV;
async function getInterestRateModel(world, cToken) {
    return new Value_1.AddressV(await cToken.methods.interestRateModel().call());
}
async function cTokenAddress(world, cToken) {
    return new Value_1.AddressV(cToken._address);
}
async function getCTokenAdmin(world, cToken) {
    return new Value_1.AddressV(await cToken.methods.admin().call());
}
async function getCTokenPendingAdmin(world, cToken) {
    return new Value_1.AddressV(await cToken.methods.pendingAdmin().call());
}
async function balanceOfUnderlying(world, cToken, user) {
    return new Value_1.NumberV(await cToken.methods.balanceOfUnderlying(user).call());
}
async function getBorrowBalance(world, cToken, user) {
    return new Value_1.NumberV(await cToken.methods.borrowBalanceCurrent(user).call());
}
async function getBorrowBalanceStored(world, cToken, user) {
    return new Value_1.NumberV(await cToken.methods.borrowBalanceStored(user).call());
}
async function getTotalBorrows(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.totalBorrows().call());
}
async function getTotalBorrowsCurrent(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.totalBorrowsCurrent().call());
}
async function getReserveFactor(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.reserveFactorMantissa().call(), 1.0e18);
}
async function getTotalReserves(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.totalReserves().call());
}
async function getComptroller(world, cToken) {
    return new Value_1.AddressV(await cToken.methods.comptroller().call());
}
async function getExchangeRateStored(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.exchangeRateStored().call());
}
async function getExchangeRate(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.exchangeRateCurrent().call(), 1e18);
}
async function getCash(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.getCash().call());
}
async function getInterestRate(world, cToken) {
    return new Value_1.NumberV(await cToken.methods.borrowRatePerBlock().call(), 1.0e18 / 10512000);
}
async function getImplementation(world, cToken) {
    return new Value_1.AddressV(await cToken.methods.implementation().call());
}
function cTokenFetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "CToken <CToken> Address" - Returns address of CToken contract
          * E.g. "CToken cZRX Address" - Returns cZRX's address
      `, "Address", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => cTokenAddress(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### InterestRateModel

        * "CToken <CToken> InterestRateModel" - Returns the interest rate model of CToken contract
          * E.g. "CToken cZRX InterestRateModel" - Returns cZRX's interest rate model
      `, "InterestRateModel", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getInterestRateModel(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Admin

        * "CToken <CToken> Admin" - Returns the admin of CToken contract
          * E.g. "CToken cZRX Admin" - Returns cZRX's admin
      `, "Admin", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getCTokenAdmin(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### PendingAdmin

        * "CToken <CToken> PendingAdmin" - Returns the pending admin of CToken contract
          * E.g. "CToken cZRX PendingAdmin" - Returns cZRX's pending admin
      `, "PendingAdmin", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getCTokenPendingAdmin(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Underlying

        * "CToken <CToken> Underlying" - Returns the underlying asset (if applicable)
          * E.g. "CToken cZRX Underlying"
      `, "Underlying", [
            new Command_1.Arg("cToken", getCTokenV)
        ], async (world, { cToken }) => new Value_1.AddressV(await cToken.methods.underlying().call()), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### UnderlyingBalance

        * "CToken <CToken> UnderlyingBalance <User>" - Returns a user's underlying balance (based on given exchange rate)
          * E.g. "CToken cZRX UnderlyingBalance Geoff"
      `, "UnderlyingBalance", [
            new Command_1.Arg("cToken", getCTokenV),
            new Command_1.Arg("address", CoreValue_1.getAddressV)
        ], (world, { cToken, address }) => balanceOfUnderlying(world, cToken, address.val), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### BorrowBalance

        * "CToken <CToken> BorrowBalance <User>" - Returns a user's borrow balance (including interest)
          * E.g. "CToken cZRX BorrowBalance Geoff"
      `, "BorrowBalance", [
            new Command_1.Arg("cToken", getCTokenV),
            new Command_1.Arg("address", CoreValue_1.getAddressV)
        ], (world, { cToken, address }) => getBorrowBalance(world, cToken, address.val), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### BorrowBalanceStored

        * "CToken <CToken> BorrowBalanceStored <User>" - Returns a user's borrow balance (without specifically re-accruing interest)
          * E.g. "CToken cZRX BorrowBalanceStored Geoff"
      `, "BorrowBalanceStored", [
            new Command_1.Arg("cToken", getCTokenV),
            new Command_1.Arg("address", CoreValue_1.getAddressV)
        ], (world, { cToken, address }) => getBorrowBalanceStored(world, cToken, address.val), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### TotalBorrows

        * "CToken <CToken> TotalBorrows" - Returns the cToken's total borrow balance
          * E.g. "CToken cZRX TotalBorrows"
      `, "TotalBorrows", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getTotalBorrows(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### TotalBorrowsCurrent

        * "CToken <CToken> TotalBorrowsCurrent" - Returns the cToken's total borrow balance with interest
          * E.g. "CToken cZRX TotalBorrowsCurrent"
      `, "TotalBorrowsCurrent", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getTotalBorrowsCurrent(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Reserves

        * "CToken <CToken> Reserves" - Returns the cToken's total reserves
          * E.g. "CToken cZRX Reserves"
      `, "Reserves", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getTotalReserves(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### ReserveFactor

        * "CToken <CToken> ReserveFactor" - Returns reserve factor of CToken contract
          * E.g. "CToken cZRX ReserveFactor" - Returns cZRX's reserve factor
      `, "ReserveFactor", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getReserveFactor(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Comptroller

        * "CToken <CToken> Comptroller" - Returns the cToken's comptroller
          * E.g. "CToken cZRX Comptroller"
      `, "Comptroller", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getComptroller(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### ExchangeRateStored

        * "CToken <CToken> ExchangeRateStored" - Returns the cToken's exchange rate (based on balances stored)
          * E.g. "CToken cZRX ExchangeRateStored"
      `, "ExchangeRateStored", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getExchangeRateStored(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### ExchangeRate

        * "CToken <CToken> ExchangeRate" - Returns the cToken's current exchange rate
          * E.g. "CToken cZRX ExchangeRate"
      `, "ExchangeRate", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getExchangeRate(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Cash

        * "CToken <CToken> Cash" - Returns the cToken's current cash
          * E.g. "CToken cZRX Cash"
      `, "Cash", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getCash(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### InterestRate

        * "CToken <CToken> InterestRate" - Returns the cToken's current interest rate
          * E.g. "CToken cZRX InterestRate"
      `, "InterestRate", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getInterestRate(world, cToken), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### CallNum

        * "CToken <CToken> Call <signature>" - Simple direct call method, for now with no parameters
          * E.g. "CToken cZRX Call \"borrowIndex()\""
      `, "CallNum", [
            new Command_1.Arg("cToken", getCTokenV),
            new Command_1.Arg("signature", CoreValue_1.getStringV),
        ], async (world, { cToken, signature }) => {
            const res = await world.web3.eth.call({
                to: cToken._address,
                data: world.web3.eth.abi.encodeFunctionSignature(signature.val)
            });
            const resNum = world.web3.eth.abi.decodeParameter('uint256', res);
            return new Value_1.NumberV(resNum);
        }, { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Implementation

        * "CToken <CToken> Implementation" - Returns the cToken's current implementation
          * E.g. "CToken cDAI Implementation"
      `, "Implementation", [
            new Command_1.Arg("cToken", getCTokenV)
        ], (world, { cToken }) => getImplementation(world, cToken), { namePos: 1 })
    ];
}
exports.cTokenFetchers = cTokenFetchers;
async function getCTokenValue(world, event) {
    return await Command_1.getFetcherValue("cToken", cTokenFetchers(), world, event);
}
exports.getCTokenValue = getCTokenValue;
//# sourceMappingURL=data:application/json;base64,